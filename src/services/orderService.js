import db from "../models";

// l·∫•y ra to√†n b·ªô ƒë∆°n h√†ng
export const getAllOrderService = (user_id) =>
    new Promise(async (resolve, reject) => {
        try {
            const orders = await db.Order.findAll({
                include: [
                    {
                        model: db.OrderDetail, 
                        as: 'order_details',
                        attributes: ['book_id', 'quantity', 'price'], 
                        include: [
                            {
                                model: db.Book, 
                                as: 'book'
                            },
                        ]
                    },
                    {
                        model: db.Customer, 
                        as: 'customer'
                    }
                ]
            });

            if (!orders.length) {
                return resolve({
                    err: 1,
                    msg: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o.",
                });
            }

            return resolve({
                err: 0,
                msg: "T√¨m th·∫•y ƒë∆°n h√†ng.",
                data: orders,
            });
        } catch (error) {
            console.error("L·ªói t·∫°i getAllOrderByUserService: ", error);
            return reject({
                err: 1,
                msg: "L·ªói khi t√¨m ki·∫øm ƒë∆°n h√†ng.",
                error: error.message,
            });
        }
    });
// update status
export const updateOrderStatusService = (order_id, status) =>
    new Promise(async (resolve, reject) => {
        try {
            // T√¨m ƒë∆°n h√†ng theo order_id
            const order = await db.Order.findOne({
                where: { order_id }
            });

            if (!order) {
                return resolve({
                    err: 1,
                    msg: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.",
                });
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
            await order.update({ status: status });

            return resolve({
                err: 0,
                msg: "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng.",
                data: { order_id, status }
            });
        } catch (error) {
            console.error("L·ªói t·∫°i updateOrderStatusService: ", error);
            return reject({
                err: 1,
                msg: "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng.",
                error: error.message,
            });
        }
    });


// l·∫•y th√¥ng tin theo ng∆∞·ªùi d√πng
export const getAllOrderByUserService = (user_id) =>
    new Promise(async (resolve, reject) => {
        try {
            // üîπ T√¨m customer_id d·ª±a tr√™n user_id
            const customer = await db.Customer.findOne({
                where: { user_id },
                attributes: ['customer_id'] // Ch·ªâ l·∫•y tr∆∞·ªùng customer_id
            });

            if (!customer) {
                return resolve({
                    err: 1,
                    msg: "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng.",
                });
            }

            // üîπ Sau khi c√≥ customer_id, l·∫•y danh s√°ch order k√®m theo book
            const orders = await db.Order.findAll({
                where: { customer_id: customer.customer_id },
                include: [
                    {
                        model: db.OrderDetail, 
                        as: 'order_details',
                        attributes: ['book_id', 'quantity', 'price'], 
                        include: [
                            {
                                model: db.Book, 
                                as: 'book'
                            }
                        ]
                    }
                ]
            });

            if (!orders.length) {
                return resolve({
                    err: 1,
                    msg: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o.",
                });
            }

            return resolve({
                err: 0,
                msg: "T√¨m th·∫•y ƒë∆°n h√†ng.",
                data: orders,
            });
        } catch (error) {
            console.error("L·ªói t·∫°i getAllOrderByUserService: ", error);
            return reject({
                err: 1,
                msg: "L·ªói khi t√¨m ki·∫øm ƒë∆°n h√†ng.",
                error: error.message,
            });
        }
    });




// L·∫•y th√¥ng tin ƒë∆°n h√†ng
export const getOrderService = (order_id) =>
    new Promise(async (resolve, reject) => {
        try {
            const order = await db.Orders.findOne({
                where: { order_id },
                attributes: [
                    "order_id",
                    "customer_id",
                    "order_date",
                    "delivery_date",
                    "delivery_price",
                    "total_price",
                    "payment_method_id",
                    "payment_status",
                ],
            });

            if (!order) {
                return resolve({
                    err: 1,
                    msg: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.",
                });
            }

            return resolve({
                err: 0,
                msg: "T√¨m th·∫•y ƒë∆°n h√†ng.",
                data: order,
            });
        } catch (error) {
            console.error("L·ªói t·∫°i getOrderService: ", error);
            return reject({
                err: 1,
                msg: "L·ªói khi t√¨m ki·∫øm ƒë∆°n h√†ng.",
                error: error.message,
            });
        }
    });

// Th√™m ƒë∆°n h√†ng m·ªõi k√®m chi ti·∫øt ƒë∆°n h√†ng v√† x√≥a kh·ªèi gi·ªè h√†ng
export const addOrderService = ({
    user_id,
    customer_id,
    order_date,
    delivery_date,
    delivery_price,
    total_price,
    discount_id, // Th√™m discount_id v√†o tham s·ªë ƒë·∫ßu v√†o
    payment_method_id,
    payment_status,
    order_details,
}) =>
    new Promise(async (resolve, reject) => {
        const transaction = await db.sequelize.transaction();
        try {
            // Th√™m ƒë∆°n h√†ng
            const newOrder = await db.Order.create(
                {
                    customer_id,
                    order_date,
                    delivery_date,
                    delivery_price: delivery_price || 0,
                    total_price: Math.ceil(total_price), // L√†m tr√≤n t·ªïng gi√° tr·ªã
                    discount_id: discount_id || null, // Th√™m discount_id (n·∫øu c√≥)
                    status: 0, // Tr·∫°ng th√°i m·∫∑c ƒë·ªãnh
                    payment_method_id,
                    payment_status: payment_status || 0,
                },
                { transaction }
            );

            // Ki·ªÉm tra v√† th√™m danh s√°ch chi ti·∫øt ƒë∆°n h√†ng
            if (!order_details || order_details.length === 0) {
                throw new Error("Kh√¥ng c√≥ chi ti·∫øt ƒë∆°n h√†ng ƒë·ªÉ th√™m.");
            }

            const orderDetailsData = order_details.map((detail) => {
                if (!detail.book_id || !detail.quantity || !detail.price) {
                    throw new Error("D·ªØ li·ªáu chi ti·∫øt ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá.");
                }

                return {
                    order_id: newOrder.order_id,
                    book_id: detail.book_id,
                    quantity: detail.quantity,
                    price: detail.price,
                };
            });

            await db.OrderDetail.bulkCreate(orderDetailsData, {
                transaction,
                validate: true, // X√°c th·ª±c d·ªØ li·ªáu tr∆∞·ªõc khi th√™m
            });

            // X√≥a c√°c s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng sau khi th√™m ƒë∆°n h√†ng th√†nh c√¥ng
            const bookIds = order_details.map((detail) => detail.book_id);
            const cartDeleteResult = await db.Cart.destroy({
                where: {
                    user_id: user_id,
                    book_id: {
                        [db.Sequelize.Op.in]: bookIds,
                    },
                },
                transaction,
            });

            // Commit transaction
            await transaction.commit();
            // L·∫•y s·ªë l∆∞·ª£ng s·∫£n ph·∫©m c√≤n l·∫°i trong gi·ªè h√†ng
            const totalProductTypes = await db.Cart.count({
                where: { user_id },
                distinct: true,
                col: 'book_id',
            });

            return resolve({
                err: 0,
                msg: "Th√™m ƒë∆°n h√†ng th√†nh c√¥ng v√† ƒë√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng.",
                data: {
                    order: newOrder,
                    details: orderDetailsData,
                    count: totalProductTypes,
                },
            });
        } catch (error) {
            await transaction.rollback();
            console.error("L·ªói t·∫°i addOrderService: ", error);
            return reject({
                err: 1,
                msg: error.message || "L·ªói khi th√™m ƒë∆°n h√†ng.",
                error: error.stack || error.message,
            });
        }
    });

// C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng
export const updateOrderService = ({
    order_id,
    customer_id,
    order_date,
    delivery_date,
    delivery_price,
    total_price,
    payment_method_id,
    payment_status,
}) =>
    new Promise(async (resolve, reject) => {
        try {
            const updated = await db.Order.update(
                {
                    customer_id,
                    order_date,
                    delivery_date,
                    delivery_price,
                    total_price,
                    payment_method_id,
                    payment_status,
                },
                {
                    where: { order_id },
                }
            );

            if (updated[0] === 0) {
                return resolve({
                    err: 1,
                    msg: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ƒë·ªÉ c·∫≠p nh·∫≠t.",
                });
            }

            return resolve({
                err: 0,
                msg: "C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng.",
            });
        } catch (error) {
            console.error("L·ªói t·∫°i updateOrderService: ", error);
            return reject({
                err: 1,
                msg: "L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng.",
                error: error.message,
            });
        }
    });

// X√≥a ƒë∆°n h√†ng
export const deleteOrderService = (order_id) =>
    new Promise(async (resolve, reject) => {
        try {
            const deleted = await db.Order.destroy({
                where: { order_id },
            });

            if (!deleted) {
                return resolve({
                    err: 1,
                    msg: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ƒë·ªÉ x√≥a.",
                });
            }

            return resolve({
                err: 0,
                msg: "X√≥a ƒë∆°n h√†ng th√†nh c√¥ng.",
            });
        } catch (error) {
            console.error("L·ªói t·∫°i deleteOrderService: ", error);
            return reject({
                err: 1,
                msg: "L·ªói khi x√≥a ƒë∆°n h√†ng.",
                error: error.message,
            });
        }
    });